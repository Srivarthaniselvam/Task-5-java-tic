import java.util.Scanner;
import java.util.Random;

public class TicTacToe {
    static char[][] board = new char[3][3];
    static Scanner scanner = new Scanner(System.in);
    static Random random = new Random();

    public static void main(String[] args) {
        playTicTacToe();
    }

    public static void playTicTacToe() {
        while (true) {
            initializeBoard();

            System.out.println("Welcome to Tic Tac Toe!");
            System.out.println("------------------------------START THE GAME------------------------------");

            String[] playerTypes = {"human", "computer"};
            shuffleArray(playerTypes);

            for (int turn = 0; turn < 9; turn++) {
                printBoard(board);
                String currentPlayerType = playerTypes[turn % 2];
                char currentPlayer = (currentPlayerType.equals("human")) ? 'X' : 'O';

                int row, col;
                if (currentPlayerType.equals("human")) {
                    int[] move = getHumanMove(currentPlayer);
                    row = move[0];
                    col = move[1];
                } else {
                    int[] move = getComputerMove();
                    row = move[0];
                    col = move[1];
                }

                if (board[row][col] == ' ') {
                    board[row][col] = currentPlayer;
                    if (checkWinner(board, currentPlayer)) {
                        printBoard(board);
                        if (currentPlayerType.equals("human")) {
                            System.out.println("Player " + currentPlayer + " wins! Congratulations, you win!");
                        } else {
                            System.out.println("Player " + currentPlayer + " wins!");
                        }
                        break;
                    } else if (isBoardFull(board)) {
                        printBoard(board);
                        System.out.println("It's a tie!");
                        break;
                    }
                } else {
                    System.out.println("Cell already occupied. Try again.");
                    turn--; // Repeat the same player's turn
                }
            }

            System.out.print("Do you want to play again? (yes/no): ");
            String playAgain = scanner.next().toLowerCase();
            if (!playAgain.equals("yes")) {
                break;
            }
        }

        System.out.println("Thanks for playing Tic Tac Toe!");
        scanner.close();
    }

    public static void initializeBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
    }

    public static void printBoard(char[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j]);
                if (j < 2) {
                    System.out.print(" | ");
                }
            }
            System.out.println();
            if (i < 2) {
                System.out.println("---------");
            }
        }
    }

    public static int[] getHumanMove(char currentPlayer) {
        while (true) {
            System.out.print("Player " + currentPlayer + ", enter your move (1-9): ");
            int move = scanner.nextInt();
            if (move >= 1 && move <= 9) {
                int row = (move - 1) / 3;
                int col = (move - 1) % 3;
                return new int[]{row, col};
            } else {
                System.out.println("Invalid move. Please enter a number between 1 and 9.");
            }
        }
    }

    public static int[] getComputerMove() {
        int row = random.nextInt(3);
        int col = random.nextInt(3);
        return new int[]{row, col};
    }

    public static boolean checkWinner(char[][] board, char currentPlayer) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
                return true;
            }
            if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) {
                return true;
            }
        }
        if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) {
            return true;
        }
        if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) {
            return true;
        }
        return false;
    }

    public static boolean isBoardFull(char[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    public static void shuffleArray(String[] array) {
        for (int i = array.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            String temp = array[index];
            array[index] = array[i];
            array[i] = temp;
        }
    }
}
